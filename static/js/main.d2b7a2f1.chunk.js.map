{"version":3,"sources":["Item.js","List.js","Form.js","App.js","index.js"],"names":["Item","content","isDone","id","updateIsDone","type","checked","onChange","style","textDecoration","List","todos","map","todo","Form","addTodos","useState","value","setValue","onSubmit","e","preventDefault","trim","alert","target","App","nanoid","setTodos","ReactDOM","render","document","getElementById"],"mappings":"oJAgBeA,EAdF,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,QAASC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,aAChC,OACI,+BACI,uBAAOC,KAAK,WAAWC,QAASJ,EAAQK,SAAU,WAE9CH,EAAaD,MAEjB,sBAAMK,MACF,CAACC,eAAgBP,EAAS,eAAiB,QAD/C,SAEGD,QCEAS,EAVF,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,MAAOP,EAAkB,EAAlBA,aAClB,OACI,6BAEQO,EAAMC,KAAI,SAACC,GAAD,OAAU,cAAC,EAAD,CAAMZ,QAASY,EAAKZ,QAASE,GAAIU,EAAKV,GAAID,OAAQW,EAAKX,OAAsBE,aAAcA,GAAvBS,EAAKV,UC0B9FW,EA/BF,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EACCC,mBAAS,IADV,mBAClBC,EADkB,KACXC,EADW,KAkBzB,OACI,sBAAMC,SAjBW,SAAAC,GASjB,GARAA,EAAEC,kBAQGJ,EAAMK,KAAK,IACZ,OAAOC,MAAM,4EAEjBR,EAASE,GACTC,EAAS,KAIT,SACI,uBACIb,KAAK,OACLE,SAAU,SAAAa,GACNF,EAASE,EAAEI,OAAOP,QAEtBA,MAAOA,O,OCqCRQ,EA3DH,WAAO,IAAD,EACYT,mBAAS,CAC/B,CACIf,QAAS,iCACTE,GAAIuB,cACJxB,QAAQ,GAEZ,CACID,QAAS,iCACTE,GAAIuB,cACJxB,QAAQ,GAEZ,CACID,QAAS,iCACTE,GAAIuB,cACJxB,QAAQ,GAEZ,CACID,QAAS,iCACTE,GAAIuB,cACJxB,QAAQ,KApBF,mBACPS,EADO,KACAgB,EADA,KAkDd,OACI,qCACI,0CACA,cAAC,EAAD,CAAMZ,SA1BG,SAACd,GACd0B,EAAS,GAAD,mBACDhB,GADC,CAEJ,CACIV,UACAE,GAAIuB,cACJxB,QAAQ,SAqBZ,cAAC,EAAD,CAAMS,MAAOA,EAAOP,aAhBP,SAAAD,GAEjBwB,EACIhB,EAAMC,KAAI,SAAAC,GAIN,OAHIA,EAAKV,KAAOA,IACZU,EAAKX,QAAUW,EAAKX,QAEjBW,aC9CvBe,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.d2b7a2f1.chunk.js","sourcesContent":["import React from 'react'\n\nconst Item = ({content, isDone, id, updateIsDone}) => {\n    return (\n        <li>\n            <input type=\"checkbox\" checked={isDone} onChange={() => {\n                // setIsDone(!isDone) // !isDoneはisDoneの逆が入る\n                updateIsDone(id)\n            }} />\n            <span style={\n                {textDecoration: isDone ? 'line-through' : 'none'}\n            }>{content}</span>\n        </li>\n    )\n}\n\nexport default Item","import React from 'react'\nimport Item from './Item'\n\nconst List = ({todos, updateIsDone}) => {\n    return (\n        <ul>\n            {\n                todos.map((todo) => <Item content={todo.content} id={todo.id} isDone={todo.isDone} key={todo.id} updateIsDone={updateIsDone} />)\n            }\n        </ul>\n    )\n}\n\nexport default List","import React, { useState } from 'react'\n\nconst Form = ({addTodos}) => {\n    const [value, setValue] = useState('')\n    const handleSubmit = e => {\n        e.preventDefault()\n        // もし入力値が空じゃなけれは、処理を中断する\n        // if (value !== '') {\n        //     addTodos(value)\n        // } else {\n        //     window.alert('入力値が入っていません！')\n        // }\n        // if (!value) { \n        if (!value.trim('')) {\n            return alert('入力値が入っていません！')\n        }\n        addTodos(value)\n        setValue('')\n        \n    }\n    return (\n        <form onSubmit={handleSubmit}>\n            <input \n                type=\"text\" \n                onChange={e => {\n                    setValue(e.target.value)\n                }}\n                value={value}\n            />\n        </form>\n    )\n}\n\nexport default Form","import React, { useState } from 'react'\nimport List from './List'\nimport Form from './Form'\nimport { nanoid } from 'nanoid'\n\nconst App = () => {\n    const [todos, setTodos] = useState([\n        {\n            content: '課題をする',\n            id: nanoid(),\n            isDone: false\n        },\n        {\n            content: '洗濯をする',\n            id: nanoid(),\n            isDone: true\n        },\n        {\n            content: '電話をする',\n            id: nanoid(),\n            isDone: true\n        },\n        {\n            content: '料理をする',\n            id: nanoid(),\n            isDone: false\n        },\n    ])\n\n    /**\n     * todoに受け取ったcontentを追加\n     */\n    const addTodos = (content) => {\n        setTodos([\n            ...todos,\n            {\n                content, // => content: content\n                id: nanoid(),\n                isDone: false\n            }\n        ])\n    }\n\n    const updateIsDone = id => {\n        // 特定のidを持つtodoのisDoneを更新する\n        setTodos(\n            todos.map(todo => {\n                if (todo.id === id) {\n                    todo.isDone = !todo.isDone\n                }\n                return todo\n            })\n        )\n    }\n\n    return (\n        <>\n            <h1>TODO APP</h1>\n            <Form addTodos={addTodos}/>\n            <List todos={todos} updateIsDone={updateIsDone} />\n        </>\n    )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from'./App'\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)"],"sourceRoot":""}